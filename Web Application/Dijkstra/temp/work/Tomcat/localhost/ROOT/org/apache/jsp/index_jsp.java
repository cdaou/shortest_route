/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.48
 * Generated at: 2020-06-26 13:39:11 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.ArrayList;
import java.util.List;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  <head>\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no\" />\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.4.0/dist/leaflet.css\"\r\n");
      out.write("      integrity=\"sha512-puBpdR0798OZvTTbP4A8Ix/l+A4dHDD0DGqYW6RQ+9jxkRFclaxxQb/SJAWZfWAkuyeQUytO7+7N4QKrDh+drA==\"\r\n");
      out.write("      crossorigin=\"\"/>\r\n");
      out.write("    <script src=\"https://unpkg.com/leaflet@1.4.0/dist/leaflet.js\"\r\n");
      out.write("    integrity=\"sha512-QVftwZFqvtRNi0ZyCtsznlKSWOStnDORoefr1enyq5mVL4tmKB3S/EnC3rRJcxCPavG10IcrVGSmPh6Qw5lwrg==\"\r\n");
      out.write("    crossorigin=\"\"></script> \r\n");
      out.write("    <link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.2.0/dist/leaflet.css\" />\r\n");
      out.write("\t<link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet-routing-machine@latest/dist/leaflet-routing-machine.css\" />\r\n");
      out.write("\t<script src='https://api.mapbox.com/mapbox-gl-js/v1.11.0/mapbox-gl.js'></script>\r\n");
      out.write("\t<link href='https://api.mapbox.com/mapbox-gl-js/v1.11.0/mapbox-gl.css' rel='stylesheet' />\r\n");
      out.write("\t<script src=\"https://unpkg.com/leaflet@1.2.0/dist/leaflet.js\"></script>\r\n");
      out.write("\t<script src=\"https://unpkg.com/leaflet-routing-machine@latest/dist/leaflet-routing-machine.js\"></script>\r\n");
      out.write("\t<style>\r\n");
      out.write("\tfieldset{\r\n");
      out.write("    -moz-box-sizing: border-box;\r\n");
      out.write("    -webkit-box-sizing: border-box;\r\n");
      out.write("    box-sizing: border-box;\r\n");
      out.write("    padding: 3px;\r\n");
      out.write("    margin:0;\r\n");
      out.write("    float: left;\r\n");
      out.write("\t}\r\n");
      out.write("\t#mapid {\r\n");
      out.write("    \tfloat: left;\r\n");
      out.write("    \twidth:100%;\r\n");
      out.write("\t}\r\n");
      out.write("\t#field1{\r\n");
      out.write("\t    width: 230px;\r\n");
      out.write("\t    height: 35px;\r\n");
      out.write("\t}\r\n");
      out.write("\t#field2 {\r\n");
      out.write("\t    width: calc(100% - 300px);\r\n");
      out.write("\t    min-height: 35px;\r\n");
      out.write("\t    min-width: 305px;\r\n");
      out.write("        float: right;\r\n");
      out.write("   \t\tmargin-right: 3px;\r\n");
      out.write("\t}\r\n");
      out.write("\t#field3 {\r\n");
      out.write("\t    width: calc(100% - 63px);\r\n");
      out.write("\t    min-height: 35px;\r\n");
      out.write("\t}\r\n");
      out.write("\t#field4 {\r\n");
      out.write("\t    width: 60px;\r\n");
      out.write("\t    min-height: 70px;\r\n");
      out.write("\t    float:right;\r\n");
      out.write("\t}\r\n");
      out.write("\t .leaflet-control-container .leaflet-top.leaflet-right {\r\n");
      out.write("\t\t\t   display: none;\r\n");
      out.write("\t\t}\r\n");
      out.write("  \t</style>\r\n");
      out.write("  </head>\r\n");
      out.write("  <body>\r\n");
      out.write("  \r\n");
      out.write("    <form id=\"start_form\" action=\"dijkstra_servlet\" method=\"get\">\r\n");
      out.write("   \t  <fieldset id=\"field4\">\r\n");
      out.write("      \t<img src=\"./loading.png\" style=\"height:50px;\">\r\n");
      out.write("      </fieldset>\r\n");
      out.write("      <fieldset id=\"field1\"><div style=\"margin-top:2px;\">\r\n");
      out.write("        Source Node: <input id=\"source_node\" type=\"text\" name=\"source\"  pattern=\"\\d{4}\" size=\"3\" required>\r\n");
      out.write("        <input type=\"submit\" value=\"Submit\">\r\n");
      out.write("      </div></fieldset>\r\n");
      out.write("      <fieldset id=\"field2\"><div style=\"margin-top:2px;\">\r\n");
      out.write("        <a style=\"color:brown;margin-left: 5px;\" id=\"checkboxes\"><b> DESTINATIONS:</b></a> <a style=\"color:black;\">\r\n");
      out.write("\t\t        <label><input id=\"1023\" onclick=\"checkboxClick(this.value);\" type=\"checkbox\" value=\"0\" checked>1023</label>\r\n");
      out.write("\t \t\t\t<label><input id=\"1013\" onclick=\"checkboxClick(this.value);\" type=\"checkbox\" value=\"1\" checked>1013</label>\r\n");
      out.write("\t \t\t\t<label><input id=\"1028\" onclick=\"checkboxClick(this.value);\" type=\"checkbox\" value=\"2\" checked>1028</label>\r\n");
      out.write("        </a><a id=\"nodes_text\"></a> \r\n");
      out.write("      </div></fieldset>\r\n");
      out.write("      <fieldset id=\"field3\"><div style=\"margin-top:3px;\">\r\n");
      out.write("      \t<a style=\"font-style:italic; color:grey;\" id=\"path_text\"> The path will show up here! </a>\r\n");
      out.write("      </div></fieldset>\r\n");
      out.write("    </form>\r\n");
      out.write("    ");
  
    	ArrayList<ArrayList<Integer>> tempList = new ArrayList<>();
    	tempList = (ArrayList<ArrayList<Integer>>) request.getAttribute("paths_"); 
    
      out.write("\r\n");
      out.write("    <script type=\"text/javascript\"> \r\n");
      out.write("    \t\t//IF DESTINATIONS ARE MORE THAN THREE CHANGE PATHLIST SIZE HERE--->\r\n");
      out.write("    \t\tvar pathList = [[],[],[]];\r\n");
      out.write("    \t\t");
if (request.getAttribute("paths_") != null){
      out.write("\r\n");
      out.write("    \t\t\t");
for(int j=0;j<tempList.size();j++){
      out.write("\r\n");
      out.write("\t    \t\t\t");
for(int i=0;i<tempList.get(j).size();i++){
      out.write("\r\n");
      out.write("\t        \t    \tpathList[");
      out.print(j);
      out.write("].push(");
      out.print( tempList.get(j).get(i) );
      out.write(");\r\n");
      out.write("\t        \t\t");
}
      out.write("\r\n");
      out.write("        \t\t");
}
      out.write("\r\n");
      out.write("        \t");
}
      out.write("\r\n");
      out.write("    </script>\r\n");
      out.write("    <p id=\"mapid\" style = \"height: 595px;\"></p>\r\n");
      out.write("    <script type=\"text/javascript\" src=\"./data.js\"></script>\r\n");
      out.write("    <script type=\"text/javascript\" src=\"./map.js\"></script>\r\n");
      out.write("    <script type=\"text/javascript\" src=\"./main.js\"></script>\r\n");
      out.write("    <script type=\"text/javascript\" src=\"./test.js\"></script>\r\n");
      out.write("\t<a id=\"time\">  </a>\r\n");
      out.write("     <script type=\"text/javascript\">\r\n");
      out.write("     var timeElapsed = ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${elapsedTime}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write(";\r\n");
      out.write("     \tif( timeElapsed >0 ){\r\n");
      out.write("     \t\ttimeElapsed = timeElapsed/1000000;\r\n");
      out.write("     \t}\r\n");
      out.write("\t     \tdocument.getElementById('time').innerHTML = \"<i>The time to calculate the shortest path(s) is: </i><b>\" + (Math.round(timeElapsed * 100) / 100).toFixed(3) + \" ms</b>\";\r\n");
      out.write("   \t</script>\r\n");
      out.write("  </body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
